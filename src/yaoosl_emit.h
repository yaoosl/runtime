#pragma once
#include "yaoosl_code.h"
#include "yaoosl_opcodes.h"

bool yaoosl_emit_uint8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_uint16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_uint32(yaooslcodehandle code, uint32_t value);
bool yaoosl_emit_uint64(yaooslcodehandle code, uint64_t value);
bool yaoosl_emit_uint(yaooslcodehandle code, uint64_t value);
bool yaoosl_emit_int8(yaooslcodehandle code, int8_t value);
bool yaoosl_emit_int16(yaooslcodehandle code, int16_t value);
bool yaoosl_emit_int32(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_int64(yaooslcodehandle code, int64_t value);
bool yaoosl_emit_opcode(yaooslcodehandle code, enum yaoosl_opcode opcode);

bool yaoosl_emit_trim_excess_from_codehandle(yaooslcodehandle code);


bool yaoosl_emit_prepend_class_declaration(yaooslcodehandle code, const char* classname);

bool yaoosl_emit_nop(yaooslcodehandle code);
bool yaoosl_emit_jump_off_a8(yaooslcodehandle code, int8_t value);
bool yaoosl_emit_jump_off_a16(yaooslcodehandle code, int16_t value);
bool yaoosl_emit_jump_off_a32(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_jump_off_a(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_skip_if_true(yaooslcodehandle code);
bool yaoosl_emit_skip_if_false(yaooslcodehandle code);
bool yaoosl_emit_skip_if_in_exception(yaooslcodehandle code);
bool yaoosl_emit_block_push(yaooslcodehandle code);
bool yaoosl_emit_block_prefix(yaooslcodehandle code);
bool yaoosl_emit_block_pop(yaooslcodehandle code);
bool yaoosl_emit_block_catch(yaooslcodehandle code);
bool yaoosl_emit_block_throw(yaooslcodehandle code);
bool yaoosl_emit_prepend_scope_allocate_a(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_scope_allocate_a(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_scope_allocate_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_scope_allocate_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_scope_pop(yaooslcodehandle code);
bool yaoosl_emit_set_value_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_set_value_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_set_value_a(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_get_value_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_get_value_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_get_value_a(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_pop_value(yaooslcodehandle code);
bool yaoosl_emit_clear_values(yaooslcodehandle code);
bool yaoosl_emit_duplicate_value(yaooslcodehandle code);
bool yaoosl_emit_create_class_begin_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_create_class_begin_a(yaooslcodehandle code, const char* name);
bool yaoosl_emit_create_class_baseclass(yaooslcodehandle code);
bool yaoosl_emit_create_class_baseclass2(yaooslcodehandle code, const char* base);
bool yaoosl_emit_create_class_end(yaooslcodehandle code);
bool yaoosl_emit_create_method_begin(yaooslcodehandle code);
bool yaoosl_emit_create_method_return(yaooslcodehandle code);
bool yaoosl_emit_create_method_return2(yaooslcodehandle code, const char* fqtype);
bool yaoosl_emit_create_method_name(yaooslcodehandle code);
bool yaoosl_emit_create_method_name2(yaooslcodehandle code, const char* name);
bool yaoosl_emit_create_method_operator(yaooslcodehandle code);
bool yaoosl_emit_create_method_operator2(yaooslcodehandle code, const char* operator);
bool yaoosl_emit_create_method_arg(yaooslcodehandle code);
bool yaoosl_emit_create_method_arg2(yaooslcodehandle code, const char* fqtype, const char* name);
bool yaoosl_emit_create_method_codeblock_a64(yaooslcodehandle code, uint64_t value);
bool yaoosl_emit_create_method_end(yaooslcodehandle code);
bool yaoosl_emit_create_property_begin(yaooslcodehandle code);
bool yaoosl_emit_create_property_name(yaooslcodehandle code);
bool yaoosl_emit_create_property_name2(yaooslcodehandle code, const char* name);
bool yaoosl_emit_create_property_return(yaooslcodehandle code);
bool yaoosl_emit_create_property_return2(yaooslcodehandle code, const char* fqtype);
bool yaoosl_emit_create_property_end(yaooslcodehandle code);
bool yaoosl_emit_navigate_property_a(yaooslcodehandle code, const char* property);
bool yaoosl_emit_navigate_property_a8(yaooslcodehandle code, int8_t value);
bool yaoosl_emit_navigate_property_a16(yaooslcodehandle code, int16_t value);
bool yaoosl_emit_navigate_property_a32(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_set_property_a(yaooslcodehandle code, const char* property);
bool yaoosl_emit_set_property_a8(yaooslcodehandle code, int8_t value);
bool yaoosl_emit_set_property_a16(yaooslcodehandle code, int16_t value);
bool yaoosl_emit_set_property_a32(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_call_a_b8(yaooslcodehandle code, const char* str, uint8_t argc);
bool yaoosl_emit_call_a8_b8(yaooslcodehandle code, uint8_t strlen, uint8_t argc);
bool yaoosl_emit_call_a16_b8(yaooslcodehandle code, uint16_t strlen, uint8_t argc);
bool yaoosl_emit_call_a32_b8(yaooslcodehandle code, uint32_t strlen, uint8_t argc);
bool yaoosl_emit_call_self_a_b8(yaooslcodehandle code, const char* str, uint8_t argc);
bool yaoosl_emit_call_self_a8_b8(yaooslcodehandle code, uint8_t strlen, uint8_t argc);
bool yaoosl_emit_call_self_a16_b8(yaooslcodehandle code, uint16_t strlen, uint8_t argc);
bool yaoosl_emit_call_self_a32_b8(yaooslcodehandle code, uint32_t strlen, uint8_t argc);
bool yaoosl_emit_increment(yaooslcodehandle code);
bool yaoosl_emit_decrement(yaooslcodehandle code);
bool yaoosl_emit_a_add(yaooslcodehandle code);
bool yaoosl_emit_a_subtract(yaooslcodehandle code);
bool yaoosl_emit_a_multiplicate(yaooslcodehandle code);
bool yaoosl_emit_a_divide(yaooslcodehandle code);
bool yaoosl_emit_a_and(yaooslcodehandle code);
bool yaoosl_emit_a_or(yaooslcodehandle code);
bool yaoosl_emit_a_xor(yaooslcodehandle code);
bool yaoosl_emit_a_bitshift_left(yaooslcodehandle code);
bool yaoosl_emit_a_bitshift_right(yaooslcodehandle code);
bool yaoosl_emit_a_modulo(yaooslcodehandle code);
bool yaoosl_emit_a_invert(yaooslcodehandle code);
bool yaoosl_emit_a_self_add(yaooslcodehandle code);
bool yaoosl_emit_a_self_subtract(yaooslcodehandle code);
bool yaoosl_emit_a_self_multiplicate(yaooslcodehandle code);
bool yaoosl_emit_a_self_divide(yaooslcodehandle code);
bool yaoosl_emit_a_self_and(yaooslcodehandle code);
bool yaoosl_emit_a_self_or(yaooslcodehandle code);
bool yaoosl_emit_a_self_xor(yaooslcodehandle code);
bool yaoosl_emit_a_self_bitshift_left(yaooslcodehandle code);
bool yaoosl_emit_a_self_bitshift_right(yaooslcodehandle code);
bool yaoosl_emit_a_self_modulo(yaooslcodehandle code);
bool yaoosl_emit_a_self_invert(yaooslcodehandle code);
bool yaoosl_emit_logical_not(yaooslcodehandle code);
bool yaoosl_emit_logical_and(yaooslcodehandle code);
bool yaoosl_emit_logical_or(yaooslcodehandle code);
bool yaoosl_emit_logical_equals(yaooslcodehandle code);
bool yaoosl_emit_logical_equals_not(yaooslcodehandle code);
bool yaoosl_emit_logical_greater_then(yaooslcodehandle code);
bool yaoosl_emit_logical_greater_then_or_equal(yaooslcodehandle code);
bool yaoosl_emit_logical_less_then(yaooslcodehandle code);
bool yaoosl_emit_logical_less_then_or_equal(yaooslcodehandle code);
bool yaoosl_emit_push_int8_a8(yaooslcodehandle code, int8_t value);
bool yaoosl_emit_push_int16_a16(yaooslcodehandle code, int16_t value);
bool yaoosl_emit_push_int32_a32(yaooslcodehandle code, int32_t value);
bool yaoosl_emit_push_int64_a64(yaooslcodehandle code, int64_t value);
bool yaoosl_emit_push_uint8_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_push_uint16_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_push_uint32_a32(yaooslcodehandle code, uint32_t value);
bool yaoosl_emit_push_uint64_a64(yaooslcodehandle code, uint64_t value);
bool yaoosl_emit_push_float_a32(yaooslcodehandle code, float value);
bool yaoosl_emit_push_double_a64(yaooslcodehandle code, double value);
bool yaoosl_emit_push_true(yaooslcodehandle code);
bool yaoosl_emit_push_false(yaooslcodehandle code);
bool yaoosl_emit_push_char_a8(yaooslcodehandle code, char value);
bool yaoosl_emit_push_string_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_push_string_a16(yaooslcodehandle code, uint16_t value);
bool yaoosl_emit_push_string_a32(yaooslcodehandle code, uint32_t value);
bool yaoosl_emit_push_string(yaooslcodehandle code, const char* str);
bool yaoosl_emit_push_this(yaooslcodehandle code);
bool yaoosl_emit_push_null(yaooslcodehandle code);
bool yaoosl_emit_push_new_a8(yaooslcodehandle code, uint8_t value);
bool yaoosl_emit_push_array(yaooslcodehandle code);
bool yaoosl_emit_push_array_typed(yaooslcodehandle code);
bool yaoosl_emit_resolve_type(yaooslcodehandle code);
bool yaoosl_emit_is_type(yaooslcodehandle code);