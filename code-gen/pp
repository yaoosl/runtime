# 1 "lex.yaoosl_.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "lex.yaoosl_.c"
# 1 "c:\\mingw\\include\\stdlib.h" 1 3
# 10 "c:\\mingw\\include\\stdlib.h" 3
# 1 "c:\\mingw\\include\\machine\\ieeefp.h" 1 3
# 11 "c:\\mingw\\include\\stdlib.h" 2 3
# 1 "c:\\mingw\\include\\_ansi.h" 1 3
# 15 "c:\\mingw\\include\\_ansi.h" 3
# 1 "c:\\mingw\\include\\newlib.h" 1 3
# 14 "c:\\mingw\\include\\newlib.h" 3
# 1 "c:\\mingw\\include\\_newlib_version.h" 1 3
# 15 "c:\\mingw\\include\\newlib.h" 2 3
# 16 "c:\\mingw\\include\\_ansi.h" 2 3
# 1 "c:\\mingw\\include\\sys\\config.h" 1 3



# 1 "c:\\mingw\\include\\machine\\ieeefp.h" 1 3
# 5 "c:\\mingw\\include\\sys\\config.h" 2 3
# 1 "c:\\mingw\\include\\sys\\features.h" 1 3
# 6 "c:\\mingw\\include\\sys\\config.h" 2 3
# 17 "c:\\mingw\\include\\_ansi.h" 2 3
# 12 "c:\\mingw\\include\\stdlib.h" 2 3




# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 216 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4

# 216 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 328 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4
typedef short unsigned int wchar_t;
# 17 "c:\\mingw\\include\\stdlib.h" 2 3

# 1 "c:\\mingw\\include\\sys\\reent.h" 1 3
# 13 "c:\\mingw\\include\\sys\\reent.h" 3
# 1 "c:\\mingw\\include\\_ansi.h" 1 3
# 14 "c:\\mingw\\include\\sys\\reent.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 149 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 426 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 15 "c:\\mingw\\include\\sys\\reent.h" 2 3
# 1 "c:\\mingw\\include\\sys\\_types.h" 1 3
# 24 "c:\\mingw\\include\\sys\\_types.h" 3
# 1 "c:\\mingw\\include\\machine\\_types.h" 1 3





# 1 "c:\\mingw\\include\\machine\\_default_types.h" 1 3
# 41 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef int __int32_t;

typedef unsigned int __uint32_t;
# 103 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef int __int_least32_t;

typedef unsigned int __uint_least32_t;
# 200 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "c:\\mingw\\include\\machine\\_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 7 "c:\\mingw\\include\\machine\\_types.h" 2 3
# 17 "c:\\mingw\\include\\machine\\_types.h" 3
typedef __int64_t __blkcnt_t;


typedef __int32_t __blksize_t;


typedef __uint32_t __dev_t;



typedef unsigned long __fsblkcnt_t;



typedef unsigned long __fsfilcnt_t;


typedef __uint32_t __uid_t;


typedef __uint32_t __gid_t;


typedef __uint64_t __ino_t;


typedef long long __key_t;


typedef __uint16_t __sa_family_t;



typedef int __socklen_t;
# 25 "c:\\mingw\\include\\sys\\_types.h" 2 3
# 1 "c:\\mingw\\include\\sys\\lock.h" 1 3
# 12 "c:\\mingw\\include\\sys\\lock.h" 3
typedef void *_LOCK_T;
# 42 "c:\\mingw\\include\\sys\\lock.h" 3
void __cygwin_lock_init(_LOCK_T *);
void __cygwin_lock_init_recursive(_LOCK_T *);
void __cygwin_lock_fini(_LOCK_T *);
void __cygwin_lock_lock(_LOCK_T *);
int __cygwin_lock_trylock(_LOCK_T *);
void __cygwin_lock_unlock(_LOCK_T *);
# 26 "c:\\mingw\\include\\sys\\_types.h" 2 3
# 44 "c:\\mingw\\include\\sys\\_types.h" 3
typedef long _off_t;





typedef int __pid_t;
# 65 "c:\\mingw\\include\\sys\\_types.h" 3
typedef __uint32_t __id_t;
# 88 "c:\\mingw\\include\\sys\\_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;
# 114 "c:\\mingw\\include\\sys\\_types.h" 3
typedef long _fpos_t;
# 129 "c:\\mingw\\include\\sys\\_types.h" 3
typedef unsigned int __size_t;
# 145 "c:\\mingw\\include\\sys\\_types.h" 3
typedef signed int _ssize_t;
# 156 "c:\\mingw\\include\\sys\\_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 357 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 3 4
typedef short unsigned int wint_t;
# 160 "c:\\mingw\\include\\sys\\_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;


typedef long __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;
# 206 "c:\\mingw\\include\\sys\\_types.h" 3
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "c:\\mingw\\include\\sys\\reent.h" 2 3






typedef unsigned long __ULong;
# 38 "c:\\mingw\\include\\sys\\reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "c:\\mingw\\include\\sys\\reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "c:\\mingw\\include\\sys\\reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "c:\\mingw\\include\\sys\\reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "c:\\mingw\\include\\sys\\reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "c:\\mingw\\include\\sys\\reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "c:\\mingw\\include\\sys\\reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};
# 775 "c:\\mingw\\include\\sys\\reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 19 "c:\\mingw\\include\\stdlib.h" 2 3
# 1 "c:\\mingw\\include\\sys\\cdefs.h" 1 3
# 45 "c:\\mingw\\include\\sys\\cdefs.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 46 "c:\\mingw\\include\\sys\\cdefs.h" 2 3
# 20 "c:\\mingw\\include\\stdlib.h" 2 3
# 1 "c:\\mingw\\include\\machine\\stdlib.h" 1 3
# 15 "c:\\mingw\\include\\machine\\stdlib.h" 3
char *mkdtemp (char *);
# 21 "c:\\mingw\\include\\stdlib.h" 2 3

# 1 "c:\\mingw\\include\\alloca.h" 1 3
# 23 "c:\\mingw\\include\\stdlib.h" 2 3
# 33 "c:\\mingw\\include\\stdlib.h" 3


typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) ;
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int _mbtowc_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);
size_t _wcstombs_r (struct _reent *, char *restrict, const wchar_t *restrict, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) ;

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
     __attribute__((__alloc_size__(3)));
void * reallocf (void * __r, size_t __size);


char * realpath (const char *restrict path, char *restrict resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);
double _strtod_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR);

float strtof (const char *restrict __n, char **restrict __end_PTR);







long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
long _strtol_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
# 188 "c:\\mingw\\include\\stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void * __arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "c:\\mingw\\include\\stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int __attribute__((__nonnull__(1))) posix_memalign (void **, size_t, size_t);


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 308 "c:\\mingw\\include\\stdlib.h" 3
void qsort_r (void * __base, size_t __nmemb, size_t __size, void * __thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("_" "__bsd_qsort_r");
# 318 "c:\\mingw\\include\\stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *restrict, char **restrict);

extern long double strtold (const char *restrict, char **restrict);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2)));
int at_quick_exit(void (*)(void));
_Noreturn void
 quick_exit(int);



# 2 "lex.yaoosl_.c" 2
# 4 "lex.yaoosl_.c"
# 279 "lex.yaoosl_.c"
# 1 "c:\\mingw\\include\\stdio.h" 1 3
# 36 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 37 "c:\\mingw\\include\\stdio.h" 2 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stdarg.h" 1 3 4
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "c:\\mingw\\include\\stdio.h" 2 3





typedef __gnuc_va_list va_list;
# 61 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\include\\sys\\types.h" 1 3
# 28 "c:\\mingw\\include\\sys\\types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "c:\\mingw\\include\\sys\\types.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 63 "c:\\mingw\\include\\sys\\types.h" 2 3

# 1 "c:\\mingw\\include\\sys\\_stdint.h" 1 3
# 20 "c:\\mingw\\include\\sys\\_stdint.h" 3
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 65 "c:\\mingw\\include\\sys\\types.h" 2 3


# 1 "c:\\mingw\\include\\machine\\endian.h" 1 3





# 1 "c:\\mingw\\include\\machine\\_endian.h" 1 3
# 14 "c:\\mingw\\include\\machine\\_endian.h" 3
# 1 "c:\\mingw\\include\\bits\\endian.h" 1 3
# 15 "c:\\mingw\\include\\machine\\_endian.h" 2 3
# 23 "c:\\mingw\\include\\machine\\_endian.h" 3
static __inline__ __uint32_t __ntohl(__uint32_t);
static __inline__ __uint16_t __ntohs(__uint16_t);

static __inline__ __uint32_t
__ntohl(__uint32_t _x)
{
 __asm__("bswap %0" : "=r" (_x) : "0" (_x));
 return _x;
}

static __inline__ __uint16_t
__ntohs(__uint16_t _x)
{
 __asm__("xchgb %b0,%h0"
  : "=Q" (_x)
  : "0" (_x));
 return _x;
}
# 7 "c:\\mingw\\include\\machine\\endian.h" 2 3
# 68 "c:\\mingw\\include\\sys\\types.h" 2 3
# 1 "c:\\mingw\\include\\sys\\select.h" 1 3
# 25 "c:\\mingw\\include\\sys\\select.h" 3
# 1 "c:\\mingw\\include\\sys\\_sigset.h" 1 3
# 41 "c:\\mingw\\include\\sys\\_sigset.h" 3
typedef unsigned long __sigset_t;
# 26 "c:\\mingw\\include\\sys\\select.h" 2 3
# 1 "c:\\mingw\\include\\sys\\_timeval.h" 1 3
# 35 "c:\\mingw\\include\\sys\\_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef long time_t;
# 52 "c:\\mingw\\include\\sys\\_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 27 "c:\\mingw\\include\\sys\\select.h" 2 3
# 1 "c:\\mingw\\include\\sys\\timespec.h" 1 3
# 38 "c:\\mingw\\include\\sys\\timespec.h" 3
# 1 "c:\\mingw\\include\\sys\\_timespec.h" 1 3
# 45 "c:\\mingw\\include\\sys\\_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "c:\\mingw\\include\\sys\\timespec.h" 2 3
# 58 "c:\\mingw\\include\\sys\\timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "c:\\mingw\\include\\sys\\select.h" 2 3



typedef __sigset_t sigset_t;
# 45 "c:\\mingw\\include\\sys\\select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 71 "c:\\mingw\\include\\sys\\select.h" 3


int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;



# 69 "c:\\mingw\\include\\sys\\types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;
# 87 "c:\\mingw\\include\\sys\\types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 135 "c:\\mingw\\include\\sys\\types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "c:\\mingw\\include\\sys\\types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 236 "c:\\mingw\\include\\sys\\types.h" 3
typedef __int64_t sbintime_t;


# 1 "c:\\mingw\\include\\sys\\_pthreadtypes.h" 1 3
# 15 "c:\\mingw\\include\\sys\\_pthreadtypes.h" 3
typedef struct __pthread_t {char __dummy;} *pthread_t;
typedef struct __pthread_mutex_t {char __dummy;} *pthread_mutex_t;

typedef struct __pthread_key_t {char __dummy;} *pthread_key_t;
typedef struct __pthread_attr_t {char __dummy;} *pthread_attr_t;
typedef struct __pthread_mutexattr_t {char __dummy;} *pthread_mutexattr_t;
typedef struct __pthread_condattr_t {char __dummy;} *pthread_condattr_t;
typedef struct __pthread_cond_t {char __dummy;} *pthread_cond_t;
typedef struct __pthread_barrierattr_t {char __dummy;} *pthread_barrierattr_t;
typedef struct __pthread_barrier_t {char __dummy;} *pthread_barrier_t;


typedef struct
{
  pthread_mutex_t mutex;
  int state;
}
pthread_once_t;
typedef struct __pthread_spinlock_t {char __dummy;} *pthread_spinlock_t;
typedef struct __pthread_rwlock_t {char __dummy;} *pthread_rwlock_t;
typedef struct __pthread_rwlockattr_t {char __dummy;} *pthread_rwlockattr_t;
# 240 "c:\\mingw\\include\\sys\\types.h" 2 3
# 1 "c:\\mingw\\include\\machine\\types.h" 1 3
# 19 "c:\\mingw\\include\\machine\\types.h" 3
# 1 "c:\\mingw\\include\\endian.h" 1 3
# 38 "c:\\mingw\\include\\endian.h" 3
# 1 "c:\\mingw\\include\\bits\\byteswap.h" 1 3
# 16 "c:\\mingw\\include\\bits\\byteswap.h" 3
static __inline unsigned short
__bswap_16 (unsigned short __x)
{
  return (__x >> 8) | (__x << 8);
}

static __inline unsigned int
__bswap_32 (unsigned int __x)
{
  return (__bswap_16 (__x & 0xffff) << 16) | (__bswap_16 (__x >> 16));
}

static __inline unsigned long long
__bswap_64 (unsigned long long __x)
{
  return (((unsigned long long) __bswap_32 (__x & 0xffffffffull)) << 32) | (__bswap_32 (__x >> 32));
}
# 39 "c:\\mingw\\include\\endian.h" 2 3
# 20 "c:\\mingw\\include\\machine\\types.h" 2 3
# 1 "c:\\mingw\\include\\bits\\wordsize.h" 1 3
# 21 "c:\\mingw\\include\\machine\\types.h" 2 3




typedef struct timespec timespec_t;




typedef struct timespec timestruc_t;


typedef __loff_t loff_t;
# 46 "c:\\mingw\\include\\machine\\types.h" 3
struct flock {
 short l_type;
 short l_whence;
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
};






typedef unsigned long vm_offset_t;




typedef unsigned long vm_size_t;




typedef void *vm_object_t;




typedef char *addr_t;





# 1 "c:\\mingw\\include\\sys\\sysmacros.h" 1 3
# 12 "c:\\mingw\\include\\sys\\sysmacros.h" 3
# 1 "c:\\mingw\\include\\sys\\types.h" 1 3
# 13 "c:\\mingw\\include\\sys\\sysmacros.h" 2 3

static __inline__ int gnu_dev_major(dev_t);
static __inline__ int gnu_dev_minor(dev_t);
static __inline__ dev_t gnu_dev_makedev(int, int);

static __inline__ int
gnu_dev_major(dev_t dev)
{
 return (int)(((dev) >> 16) & 0xffff);
}

static __inline__ int
gnu_dev_minor(dev_t dev)
{
 return (int)((dev) & 0xffff);
}

static __inline__ dev_t
gnu_dev_makedev(int maj, int min)
{
 return (((maj) << 16) | ((min) & 0xffff));
}
# 81 "c:\\mingw\\include\\machine\\types.h" 2 3
# 241 "c:\\mingw\\include\\sys\\types.h" 2 3
# 62 "c:\\mingw\\include\\stdio.h" 2 3




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "c:\\mingw\\include\\sys\\stdio.h" 1 3
# 33 "c:\\mingw\\include\\sys\\stdio.h" 3


ssize_t getline (char **, size_t *, FILE *);
ssize_t getdelim (char **, size_t *, int, FILE *);


# 80 "c:\\mingw\\include\\stdio.h" 2 3
# 181 "c:\\mingw\\include\\stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "c:\\mingw\\include\\stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "c:\\mingw\\include\\stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "c:\\mingw\\include\\stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "c:\\mingw\\include\\stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);
# 396 "c:\\mingw\\include\\stdio.h" 3
int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 577 "c:\\mingw\\include\\stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 601 "c:\\mingw\\include\\stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
# 687 "c:\\mingw\\include\\stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 741 "c:\\mingw\\include\\stdio.h" 3
static __inline int
_getchar_unlocked(void)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return ((--(((_ptr)->_stdin))->_r < 0 ? __srget_r(_ptr, ((_ptr)->_stdin)) : (int)(*(((_ptr)->_stdin))->_p++)));
}

static __inline int
_putchar_unlocked(int _c)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return (__sputc_r(_ptr, _c, ((_ptr)->_stdout)));
}
# 797 "c:\\mingw\\include\\stdio.h" 3

# 280 "lex.yaoosl_.c" 2
# 1 "c:\\mingw\\include\\string.h" 1 3
# 17 "c:\\mingw\\include\\string.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 18 "c:\\mingw\\include\\string.h" 2 3


# 1 "c:\\mingw\\include\\xlocale.h" 1 3
# 9 "c:\\mingw\\include\\xlocale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "c:\\mingw\\include\\string.h" 2 3



# 1 "c:\\mingw\\include\\strings.h" 1 3
# 44 "c:\\mingw\\include\\strings.h" 3


int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));






int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);


# 25 "c:\\mingw\\include\\string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void * restrict, const void * restrict, int, size_t);
# 76 "c:\\mingw\\include\\string.h" 3
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 100 "c:\\mingw\\include\\string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("_" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 175 "c:\\mingw\\include\\string.h" 3
# 1 "c:\\mingw\\include\\sys\\string.h" 1 3
# 176 "c:\\mingw\\include\\string.h" 2 3


# 281 "lex.yaoosl_.c" 2
# 1 "c:\\mingw\\include\\errno.h" 1 3




typedef int error_t;



# 1 "c:\\mingw\\include\\sys\\errno.h" 1 3
# 15 "c:\\mingw\\include\\sys\\errno.h" 3
extern int *__errno (void);




extern const char * const _sys_errlist[];
extern int _sys_nerr;
# 10 "c:\\mingw\\include\\errno.h" 2 3
# 282 "lex.yaoosl_.c" 2
# 302 "lex.yaoosl_.c"
# 1 "c:\\mingw\\include\\inttypes.h" 1 3
# 18 "c:\\mingw\\include\\inttypes.h" 3
# 1 "c:\\mingw\\include\\sys\\_intsup.h" 1 3
# 35 "c:\\mingw\\include\\sys\\_intsup.h" 3
       
       
       
       
       
       
       
# 187 "c:\\mingw\\include\\sys\\_intsup.h" 3
       
       
       
       
       
       
       
# 19 "c:\\mingw\\include\\inttypes.h" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stdint.h" 1 3 4
# 9 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stdint.h" 3 4
# 1 "c:\\mingw\\include\\stdint.h" 1 3 4
# 21 "c:\\mingw\\include\\stdint.h" 3 4
typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "c:\\mingw\\include\\stdint.h" 3 4
  typedef signed char int_fast8_t;
  typedef unsigned char uint_fast8_t;
# 61 "c:\\mingw\\include\\stdint.h" 3 4
  typedef short int int_fast16_t;
  typedef short unsigned int uint_fast16_t;
# 71 "c:\\mingw\\include\\stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "c:\\mingw\\include\\stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 10 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stdint.h" 2 3 4
# 21 "c:\\mingw\\include\\inttypes.h" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\6.3.0\\include\\stddef.h" 1 3 4
# 23 "c:\\mingw\\include\\inttypes.h" 2 3
# 312 "c:\\mingw\\include\\inttypes.h" 3
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

struct _reent;





extern intmax_t imaxabs(intmax_t j);
extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denomer);
extern intmax_t strtoimax(const char *restrict, char **restrict, int);
extern intmax_t _strtoimax_r(struct _reent *, const char *restrict, char **restrict, int);
extern uintmax_t strtoumax(const char *restrict, char **restrict, int);
extern uintmax_t _strtoumax_r(struct _reent *, const char *restrict, char **restrict, int);
extern intmax_t wcstoimax(const wchar_t *restrict, wchar_t **restrict, int);
extern intmax_t _wcstoimax_r(struct _reent *, const wchar_t *restrict, wchar_t **restrict, int);
extern uintmax_t wcstoumax(const wchar_t *restrict, wchar_t **restrict, int);
extern uintmax_t _wcstoumax_r(struct _reent *, const wchar_t *restrict, wchar_t **restrict, int);


extern intmax_t strtoimax_l(const char *restrict, char **_restrict, int, locale_t);
extern uintmax_t strtoumax_l(const char *restrict, char **_restrict, int, locale_t);
extern intmax_t wcstoimax_l(const wchar_t *restrict, wchar_t **_restrict, int, locale_t);
extern uintmax_t wcstoumax_l(const wchar_t *restrict, wchar_t **_restrict, int, locale_t);
# 303 "lex.yaoosl_.c" 2

# 303 "lex.yaoosl_.c"
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
# 409 "lex.yaoosl_.c"
typedef struct yy_buffer_state *YY_BUFFER_STATE;




typedef size_t yy_size_t;


extern int yaoosl_leng;

extern FILE *yaoosl_in, *yaoosl_out;
# 445 "lex.yaoosl_.c"
struct yy_buffer_state
 {
 FILE *yy_input_file;

 char *yy_ch_buf;
 char *yy_buf_pos;




 int yy_buf_size;




 int yy_n_chars;





 int yy_is_our_buffer;






 int yy_is_interactive;





 int yy_at_bol;

    int yy_bs_lineno;
    int yy_bs_column;




 int yy_fill_buffer;

 int yy_buffer_status;
# 505 "lex.yaoosl_.c"
 };



static size_t yy_buffer_stack_top = 0;
static size_t yy_buffer_stack_max = 0;
static YY_BUFFER_STATE * yy_buffer_stack = 
# 511 "lex.yaoosl_.c" 3 4
                                          ((void *)0)
# 511 "lex.yaoosl_.c"
                                              ;
# 528 "lex.yaoosl_.c"
static char yy_hold_char;
static int yy_n_chars;
int yaoosl_leng;


static char *yy_c_buf_p = 
# 533 "lex.yaoosl_.c" 3 4
                         ((void *)0)
# 533 "lex.yaoosl_.c"
                             ;
static int yy_init = 0;
static int yy_start = 0;




static int yy_did_buffer_switch_on_eof;

void yaoosl_restart ( FILE *input_file );
void yaoosl__switch_to_buffer ( YY_BUFFER_STATE new_buffer );
YY_BUFFER_STATE yaoosl__create_buffer ( FILE *file, int size );
void yaoosl__delete_buffer ( YY_BUFFER_STATE b );
void yaoosl__flush_buffer ( YY_BUFFER_STATE b );
void yaoosl_push_buffer_state ( YY_BUFFER_STATE new_buffer );
void yaoosl_pop_buffer_state ( void );

static void yaoosl_ensure_buffer_stack ( void );
static void yaoosl__load_buffer_state ( void );
static void yaoosl__init_buffer ( YY_BUFFER_STATE b, FILE *file );


YY_BUFFER_STATE yaoosl__scan_buffer ( char *base, yy_size_t size );
YY_BUFFER_STATE yaoosl__scan_string ( const char *yy_str );
YY_BUFFER_STATE yaoosl__scan_bytes ( const char *bytes, int len );

void *yaoosl_alloc ( yy_size_t );
void *yaoosl_realloc ( void *, yy_size_t );
void yaoosl_free ( void * );
# 588 "lex.yaoosl_.c"
typedef flex_uint8_t YY_CHAR;

FILE *yaoosl_in = 
# 590 "lex.yaoosl_.c" 3 4
            ((void *)0)
# 590 "lex.yaoosl_.c"
                , *yaoosl_out = 
# 590 "lex.yaoosl_.c" 3 4
                           ((void *)0)
# 590 "lex.yaoosl_.c"
                               ;

typedef int yy_state_type;

extern int yaoosl_lineno;
int yaoosl_lineno = 1;

extern char *yaoosl_text;





static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state );
static int yy_get_next_buffer ( void );
static void __attribute__((__noreturn__)) yy_fatal_error ( const char* msg );
# 621 "lex.yaoosl_.c"
struct yy_trans_info
 {
 flex_int32_t yy_verify;
 flex_int32_t yy_nxt;
 };
static const flex_int16_t yy_accept[198] =
    { 0,
        0, 0, 80, 79, 29, 79, 31, 47, 79, 6,
        7, 19, 16, 11, 18, 53, 20, 54, 54, 1,
       10, 23, 34, 26, 43, 78, 8, 9, 79, 78,
       78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
       78, 78, 78, 78, 78, 4, 46, 5, 30, 28,
        0, 57, 0, 42, 45, 37, 0, 58, 0, 39,
       15, 0, 54, 41, 17, 40, 54, 38, 0, 0,
        0, 21, 22, 27, 25, 24, 78, 35, 48, 78,
       78, 78, 78, 69, 78, 78, 78, 78, 65, 78,
       49, 78, 78, 78, 78, 78, 78, 78, 78, 78,

       78, 78, 78, 78, 78, 36, 44, 57, 58, 56,
        0, 54, 55, 78, 78, 78, 78, 78, 78, 67,
       12, 78, 78, 59, 78, 78, 78, 78, 78, 78,
       13, 78, 78, 78, 78, 70, 78, 33, 78, 78,
       78, 78, 78, 78, 66, 78, 78, 78, 74, 78,
       78, 78, 78, 78, 78, 14, 78, 51, 78, 73,
       78, 75, 71, 2, 78, 52, 78, 50, 78, 78,
       78, 78, 78, 78, 72, 78, 68, 78, 78, 78,
       78, 78, 63, 77, 64, 32, 78, 78, 78, 60,
       78, 76, 62, 3, 78, 61, 0

    } ;

static const YY_CHAR yy_ec[256] =
    { 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 2, 3, 1, 1, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
       17, 17, 17, 17, 17, 17, 17, 18, 19, 20,
       21, 22, 23, 1, 24, 25, 24, 24, 26, 24,
       24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
       24, 24, 24, 24, 24, 24, 24, 27, 24, 24,
       28, 29, 30, 31, 32, 1, 33, 34, 35, 36,

       37, 38, 39, 40, 41, 24, 42, 43, 24, 44,
       45, 46, 24, 47, 48, 49, 50, 51, 52, 27,
       53, 24, 54, 55, 56, 57, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    } ;

static const YY_CHAR yy_meta[58] =
    { 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 2, 2, 1, 1, 1,
        1, 1, 1, 2, 2, 2, 2, 1, 1, 1,
        1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 1, 1, 1, 1
    } ;

static const flex_int16_t yy_base[202] =
    { 0,
        0, 0, 264, 265, 242, 55, 241, 54, 54, 265,
      265, 240, 51, 265, 61, 54, 239, 72, 77, 265,
      265, 42, 238, 58, 265, 0, 265, 265, 237, 209,
      209, 62, 210, 211, 63, 216, 72, 54, 206, 65,
      214, 64, 71, 84, 210, 265, 79, 265, 265, 265,
       99, 246, 219, 265, 265, 265, 113, 241, 217, 265,
      265, 106, 120, 265, 265, 265, 115, 265, 111, 138,
        0, 265, 265, 265, 265, 265, 0, 265, 0, 208,
      195, 210, 198, 0, 193, 197, 192, 189, 0, 188,
      192, 183, 191, 196, 99, 198, 182, 181, 196, 98,

      106, 182, 180, 185, 184, 265, 265, 265, 265, 145,
      147, 150, 0, 191, 188, 174, 172, 183, 171, 0,
        0, 181, 172, 0, 173, 168, 163, 164, 169, 161,
        0, 161, 161, 163, 170, 0, 169, 0, 169, 161,
      161, 162, 153, 159, 0, 162, 151, 148, 0, 163,
      162, 157, 152, 145, 150, 0, 138, 0, 144, 0,
      151, 0, 0, 0, 143, 0, 142, 0, 127, 126,
      139, 138, 128, 136, 0, 132, 0, 119, 135, 113,
      114, 100, 0, 0, 0, 0, 110, 95, 78, 0,
       49, 0, 0, 0, 45, 0, 265, 177, 180, 182,

       63
    } ;

static const flex_int16_t yy_def[202] =
    { 0,
      197, 1, 197, 197, 197, 198, 197, 197, 199, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 200, 197, 197, 197, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 197, 197, 197, 197, 197,
      198, 197, 198, 197, 197, 197, 199, 197, 199, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      201, 197, 197, 197, 197, 197, 200, 197, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,

      200, 200, 200, 200, 200, 197, 197, 197, 197, 197,
      197, 197, 201, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
      200, 200, 200, 200, 200, 200, 0, 197, 197, 197,

      197
    } ;

static const flex_int16_t yy_nxt[323] =
    { 0,
        4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
       14, 15, 16, 17, 18, 19, 19, 20, 21, 22,
       23, 24, 25, 26, 26, 26, 26, 27, 4, 28,
       29, 26, 30, 31, 32, 33, 34, 35, 36, 26,
       37, 26, 26, 38, 39, 40, 41, 42, 43, 26,
       44, 45, 26, 46, 47, 48, 49, 52, 55, 58,
       61, 72, 73, 62, 113, 63, 63, 63, 67, 67,
       67, 64, 65, 62, 56, 63, 63, 63, 75, 76,
      196, 66, 59, 53, 62, 195, 63, 63, 63, 62,
       92, 63, 63, 63, 81, 86, 69, 70, 71, 106,

       98, 52, 70, 93, 82, 69, 83, 87, 70, 89,
      100, 95, 99, 70, 96, 90, 103, 101, 58, 91,
       67, 67, 67, 102, 194, 110, 110, 53, 104, 67,
       67, 67, 62, 107, 63, 63, 63, 193, 133, 127,
       70, 59, 110, 128, 134, 70, 192, 111, 191, 111,
      190, 70, 112, 112, 112, 135, 70, 189, 136, 110,
      110, 112, 112, 112, 112, 112, 112, 188, 187, 186,
      185, 184, 183, 182, 181, 180, 110, 51, 51, 51,
       57, 57, 57, 77, 77, 179, 178, 177, 176, 175,
      174, 173, 172, 171, 170, 169, 168, 167, 166, 165,

      164, 163, 162, 161, 160, 159, 158, 157, 156, 155,
      154, 153, 152, 151, 150, 149, 148, 147, 146, 145,
      144, 143, 142, 141, 140, 139, 138, 137, 132, 131,
      130, 129, 126, 125, 124, 123, 122, 121, 120, 119,
      118, 117, 116, 115, 114, 59, 109, 53, 108, 105,
       97, 94, 88, 85, 84, 80, 79, 78, 74, 68,
       60, 54, 50, 197, 3, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,

      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197
    } ;

static const flex_int16_t yy_chk[323] =
    { 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 6, 8, 9,
       13, 22, 22, 13, 201, 13, 13, 13, 16, 16,
       16, 13, 15, 15, 8, 15, 15, 15, 24, 24,
      195, 15, 9, 6, 18, 191, 18, 18, 18, 19,
       38, 19, 19, 19, 32, 35, 18, 18, 18, 47,

       42, 51, 19, 38, 32, 18, 32, 35, 18, 37,
       43, 40, 42, 19, 40, 37, 44, 43, 57, 37,
       62, 62, 62, 43, 189, 69, 69, 51, 44, 67,
       67, 67, 63, 47, 63, 63, 63, 188, 100, 95,
       67, 57, 69, 95, 100, 63, 187, 70, 182, 70,
      181, 67, 70, 70, 70, 101, 63, 180, 101, 110,
      110, 111, 111, 111, 112, 112, 112, 179, 178, 176,
      174, 173, 172, 171, 170, 169, 110, 198, 198, 198,
      199, 199, 199, 200, 200, 167, 165, 161, 159, 157,
      155, 154, 153, 152, 151, 150, 148, 147, 146, 144,

      143, 142, 141, 140, 139, 137, 135, 134, 133, 132,
      130, 129, 128, 127, 126, 125, 123, 122, 119, 118,
      117, 116, 115, 114, 105, 104, 103, 102, 99, 98,
       97, 96, 94, 93, 92, 91, 90, 88, 87, 86,
       85, 83, 82, 81, 80, 59, 58, 53, 52, 45,
       41, 39, 36, 34, 33, 31, 30, 29, 23, 17,
       12, 7, 5, 3, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,

      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
      197, 197
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yaoosl__flex_debug;
int yaoosl__flex_debug = 0;
# 841 "lex.yaoosl_.c"
char *yaoosl_text;
# 1 "yaoosl.l"
# 848 "lex.yaoosl_.c"
# 863 "lex.yaoosl_.c"
static int yy_init_globals ( void );




int yaoosl_lex_destroy ( void );

int yaoosl_get_debug ( void );

void yaoosl_set_debug ( int debug_flag );

void * yaoosl_get_extra ( void );

void yaoosl_set_extra ( void * user_defined );

FILE *yaoosl_get_in ( void );

void yaoosl_set_in ( FILE * _in_str );

FILE *yaoosl_get_out ( void );

void yaoosl_set_out ( FILE * _out_str );

   int yaoosl_get_leng ( void );

char *yaoosl_get_text ( void );

int yaoosl_get_lineno ( void );

void yaoosl_set_lineno ( int _line_number );
# 908 "lex.yaoosl_.c"
    static void yyunput ( int c, char *buf_ptr );
# 924 "lex.yaoosl_.c"
static int input ( void );
# 1009 "lex.yaoosl_.c"
extern int yaoosl_lex (void);
# 1031 "lex.yaoosl_.c"
int yaoosl_lex (void)
{
 yy_state_type yy_current_state;
 char *yy_cp, *yy_bp;
 int yy_act;

 if ( !(yy_init) )
  {
  (yy_init) = 1;





  if ( ! (yy_start) )
   (yy_start) = 1;

  if ( ! yaoosl_in )
   yaoosl_in = 
# 1049 "lex.yaoosl_.c" 3
         (_impure_ptr->_stdin)
# 1049 "lex.yaoosl_.c"
              ;

  if ( ! yaoosl_out )
   yaoosl_out = 
# 1052 "lex.yaoosl_.c" 3
          (_impure_ptr->_stdout)
# 1052 "lex.yaoosl_.c"
                ;

  if ( ! ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 1054 "lex.yaoosl_.c" 3 4
        ((void *)0)
# 1054 "lex.yaoosl_.c"
        ) ) {
   yaoosl_ensure_buffer_stack ();
   (yy_buffer_stack)[(yy_buffer_stack_top)] =
    yaoosl__create_buffer( yaoosl_in, 16384 );
  }

  yaoosl__load_buffer_state( );
  }

 {
# 15 "yaoosl.l"
# 1068 "lex.yaoosl_.c"

 while ( 1 )
  {
  yy_cp = (yy_c_buf_p);


  *yy_cp = (yy_hold_char);




  yy_bp = yy_cp;

  yy_current_state = (yy_start);
yy_match:
  do
   {
   YY_CHAR yy_c = yy_ec[((YY_CHAR) (*yy_cp))] ;
   if ( yy_accept[yy_current_state] )
    {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
    }
   while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 198 )
     yy_c = yy_meta[yy_c];
    }
   yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
   ++yy_cp;
   }
  while ( yy_current_state != 197 );
  yy_cp = (yy_last_accepting_cpos);
  yy_current_state = (yy_last_accepting_state);

yy_find_action:
  yy_act = yy_accept[yy_current_state];

  (yaoosl_text) = yy_bp; yaoosl_leng = (int) (yy_cp - yy_bp); (yy_hold_char) = *yy_cp; *yy_cp = '\0'; (yy_c_buf_p) = yy_cp;;

do_action:

  switch ( yy_act )
 {
   case 0:

   *yy_cp = (yy_hold_char);
   yy_cp = (yy_last_accepting_cpos);
   yy_current_state = (yy_last_accepting_state);
   goto yy_find_action;

case 1:

# 17 "yaoosl.l"
{ return YST_COLON; }
 break;
case 2:

# 18 "yaoosl.l"
{ return YST_CLASS; }
 break;
case 3:

# 19 "yaoosl.l"
{ return YST_OPERATOR; }
 break;
case 4:

# 20 "yaoosl.l"
{ return YST_CURLYO; }
 break;
case 5:

# 21 "yaoosl.l"
{ return YST_CURLYC; }
 break;
case 6:

# 22 "yaoosl.l"
{ return YST_ROUNDO; }
 break;
case 7:

# 23 "yaoosl.l"
{ return YST_ROUNDC; }
 break;
case 8:

# 24 "yaoosl.l"
{ return YST_SQUAREO; }
 break;
case 9:

# 25 "yaoosl.l"
{ return YST_SQUAREC; }
 break;
case 10:

# 26 "yaoosl.l"
{ return YST_SC; }
 break;
case 11:

# 27 "yaoosl.l"
{ return YST_COMMA; }
 break;
case 12:

# 28 "yaoosl.l"
{ return YST_GET; }
 break;
case 13:

# 29 "yaoosl.l"
{ return YST_SET; }
 break;
case 14:

# 30 "yaoosl.l"
{ return YST_THIS; }
 break;
case 15:

# 31 "yaoosl.l"
{ return YST_PLUSPLUS; }
 break;
case 16:

# 32 "yaoosl.l"
{ return YST_PLUS; }
 break;
case 17:

# 33 "yaoosl.l"
{ return YST_MINUSMINUS; }
 break;
case 18:

# 34 "yaoosl.l"
{ return YST_MINUS; }
 break;
case 19:

# 35 "yaoosl.l"
{ return YST_STAR; }
 break;
case 20:

# 36 "yaoosl.l"
{ return YST_SLASH; }
 break;
case 21:

# 37 "yaoosl.l"
{ return YST_LTLT; }
 break;
case 22:

# 38 "yaoosl.l"
{ return YST_LTEQ; }
 break;
case 23:

# 39 "yaoosl.l"
{ return YST_LT; }
 break;
case 24:

# 40 "yaoosl.l"
{ return YST_GTGT; }
 break;
case 25:

# 41 "yaoosl.l"
{ return YST_GTEQ; }
 break;
case 26:

# 42 "yaoosl.l"
{ return YST_GT; }
 break;
case 27:

# 43 "yaoosl.l"
{ return YST_EQEQ; }
 break;
case 28:

# 44 "yaoosl.l"
{ return YST_NOTEQ; }
 break;
case 29:

# 45 "yaoosl.l"
{ return YST_NOT; }
 break;
case 30:

# 46 "yaoosl.l"
{ return YST_INVERT; }
 break;
case 31:

# 47 "yaoosl.l"
{ return YST_MODULO; }
 break;
case 32:

# 48 "yaoosl.l"
{ return YST_TYPEOF; }
 break;
case 33:

# 49 "yaoosl.l"
{ return YST_VAR; }
 break;
case 34:

# 50 "yaoosl.l"
{ return YST_EQ; }
 break;
case 35:

# 51 "yaoosl.l"
{ return YST_EQXOR; }
 break;
case 36:

# 52 "yaoosl.l"
{ return YST_EQOR; }
 break;
case 37:

# 53 "yaoosl.l"
{ return YST_EQAND; }
 break;
case 38:

# 54 "yaoosl.l"
{ return YST_EQSLAH; }
 break;
case 39:

# 55 "yaoosl.l"
{ return YST_EQSTAR; }
 break;
case 40:

# 56 "yaoosl.l"
{ return YST_EQMINUS; }
 break;
case 41:

# 57 "yaoosl.l"
{ return YST_EQPLUS; }
 break;
case 42:

# 58 "yaoosl.l"
{ return YST_EQMODULO; }
 break;
case 43:

# 59 "yaoosl.l"
{ return YST_QUESTIONMARK; }
 break;
case 44:

# 60 "yaoosl.l"
{ return YST_LOGICAL_OR; }
 break;
case 45:

# 61 "yaoosl.l"
{ return YST_LOGICAL_AND; }
 break;
case 46:

# 62 "yaoosl.l"
{ return YST_ARITHMETICAL_OR; }
 break;
case 47:

# 63 "yaoosl.l"
{ return YST_ARITHMETICAL_AND; }
 break;
case 48:

# 64 "yaoosl.l"
{ return YST_AS; }
 break;
case 49:

# 65 "yaoosl.l"
{ return YST_IS; }
 break;
case 50:

# 66 "yaoosl.l"
{ return YST_IS_NOT; }
 break;
case 51:

# 67 "yaoosl.l"
{ return YST_TRUE; }
 break;
case 52:

# 68 "yaoosl.l"
{ return YST_FALSE; }
 break;
case 53:

# 69 "yaoosl.l"
{ return YST_DOT; }
 break;
case 54:

# 70 "yaoosl.l"
{ yaoosl_lval.d = strtol(yaoosl_text, 
# 70 "yaoosl.l" 3 4
                                ((void *)0)
# 70 "yaoosl.l"
                                    , 10); return YST_NUMBER; }
 break;
case 55:

# 71 "yaoosl.l"
{ yaoosl_lval.ll = strtol(yaoosl_text + 2, 
# 71 "yaoosl.l" 3 4
                                     ((void *)0)
# 71 "yaoosl.l"
                                         , 16); return YST_HEXNUMBER; }
 break;
case 56:

# 72 "yaoosl.l"
{ yaoosl_lval.ll = strtol(yaoosl_text + 2, 
# 72 "yaoosl.l" 3 4
                                     ((void *)0)
# 72 "yaoosl.l"
                                         , 2); return YST_BINARYNUMBER; }
 break;
case 57:


# 73 "yaoosl.l"
{ yaoosl_lval.str = strdup(yaoosl_text); return YST_STRING; }
 break;
case 58:


# 74 "yaoosl.l"
{ yaoosl_lval.str = strdup(yaoosl_text); return YST_CHAR; }
 break;
case 59:

# 75 "yaoosl.l"
{ return YST_NEW; }
 break;
case 60:

# 76 "yaoosl.l"
{ return YST_PRIVATE; }
 break;
case 61:

# 77 "yaoosl.l"
{ return YST_PROTECTED; }
 break;
case 62:

# 78 "yaoosl.l"
{ return YST_INTERNAL; }
 break;
case 63:

# 79 "yaoosl.l"
{ return YST_PUBLIC; }
 break;
case 64:

# 80 "yaoosl.l"
{ return YST_STATIC; }
 break;
case 65:

# 81 "yaoosl.l"
{ return YST_IF; }
 break;
case 66:

# 82 "yaoosl.l"
{ return YST_ELSE; }
 break;
case 67:

# 83 "yaoosl.l"
{ return YST_FOR; }
 break;
case 68:

# 84 "yaoosl.l"
{ return YST_WHILE; }
 break;
case 69:

# 85 "yaoosl.l"
{ return YST_DO; }
 break;
case 70:

# 86 "yaoosl.l"
{ return YST_TRY; }
 break;
case 71:

# 87 "yaoosl.l"
{ return YST_CATCH; }
 break;
case 72:

# 88 "yaoosl.l"
{ return YST_THROW; }
 break;
case 73:

# 89 "yaoosl.l"
{ return YST_VOID; }
 break;
case 74:

# 90 "yaoosl.l"
{ return YST_NULL; }
 break;
case 75:

# 91 "yaoosl.l"
{ return YST_BREAK; }
 break;
case 76:

# 92 "yaoosl.l"
{ return YST_CONTINUE; }
 break;
case 77:

# 93 "yaoosl.l"
{ return YST_RETURN; }
 break;
case 78:

# 96 "yaoosl.l"
{ yaoosl_lval.str = strdup(yaoosl_text); return YST_NAME; }
 break;
case 79:

# 98 "yaoosl.l"
do { if (fwrite( yaoosl_text, (size_t) yaoosl_leng, 1, yaoosl_out )) {} } while (0);
 break;
# 1518 "lex.yaoosl_.c"
case (80 + 0 + 1):
 return 0;

 case 80:
  {

  int yy_amount_of_matched_text = (int) (yy_cp - (yaoosl_text)) - 1;


  *yy_cp = (yy_hold_char);
 

  if ( (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buffer_status == 0 )
   {
# 1541 "lex.yaoosl_.c"
   (yy_n_chars) = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars;
   (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_input_file = yaoosl_in;
   (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buffer_status = 1;
   }
# 1553 "lex.yaoosl_.c"
  if ( (yy_c_buf_p) <= &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars)] )
   {
   yy_state_type yy_next_state;

   (yy_c_buf_p) = (yaoosl_text) + yy_amount_of_matched_text;

   yy_current_state = yy_get_previous_state( );
# 1570 "lex.yaoosl_.c"
   yy_next_state = yy_try_NUL_trans( yy_current_state );

   yy_bp = (yaoosl_text) + 0;

   if ( yy_next_state )
    {

    yy_cp = ++(yy_c_buf_p);
    yy_current_state = yy_next_state;
    goto yy_match;
    }

   else
    {
    yy_cp = (yy_last_accepting_cpos);
    yy_current_state = (yy_last_accepting_state);
    goto yy_find_action;
    }
   }

  else switch ( yy_get_next_buffer( ) )
   {
   case 1:
    {
    (yy_did_buffer_switch_on_eof) = 0;

    if ( ( 1) )
     {
# 1607 "lex.yaoosl_.c"
     (yy_c_buf_p) = (yaoosl_text) + 0;

     yy_act = (80 + (((yy_start) - 1) / 2) + 1);
     goto do_action;
     }

    else
     {
     if ( ! (yy_did_buffer_switch_on_eof) )
      yaoosl_restart( yaoosl_in );
     }
    break;
    }

   case 0:
    (yy_c_buf_p) =
     (yaoosl_text) + yy_amount_of_matched_text;

    yy_current_state = yy_get_previous_state( );

    yy_cp = (yy_c_buf_p);
    yy_bp = (yaoosl_text) + 0;
    goto yy_match;

   case 2:
    (yy_c_buf_p) =
    &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars)];

    yy_current_state = yy_get_previous_state( );

    yy_cp = (yy_c_buf_p);
    yy_bp = (yaoosl_text) + 0;
    goto yy_find_action;
   }
  break;
  }

 default:
  yy_fatal_error( "fatal flex scanner internal error--no action found" )
                                                         ;
 }
  }
 }
}
# 1659 "lex.yaoosl_.c"
static int yy_get_next_buffer (void)
{
     char *dest = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf;
 char *source = (yaoosl_text);
 int number_to_move, i;
 int ret_val;

 if ( (yy_c_buf_p) > &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars) + 1] )
  yy_fatal_error( "fatal flex scanner internal error--end of buffer missed" )
                                                             ;

 if ( (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_fill_buffer == 0 )
  {
  if ( (yy_c_buf_p) - (yaoosl_text) - 0 == 1 )
   {



   return 1;
   }

  else
   {



   return 2;
   }
  }




 number_to_move = (int) ((yy_c_buf_p) - (yaoosl_text) - 1);

 for ( i = 0; i < number_to_move; ++i )
  *(dest++) = *(source++);

 if ( (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buffer_status == 2 )



  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars = (yy_n_chars) = 0;

 else
  {
   int num_to_read =
   (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size - number_to_move - 1;

  while ( num_to_read <= 0 )
   {


   YY_BUFFER_STATE b = (yy_buffer_stack)[(yy_buffer_stack_top)];

   int yy_c_buf_p_offset =
    (int) ((yy_c_buf_p) - b->yy_ch_buf);

   if ( b->yy_is_our_buffer )
    {
    int new_size = b->yy_buf_size * 2;

    if ( new_size <= 0 )
     b->yy_buf_size += b->yy_buf_size / 8;
    else
     b->yy_buf_size *= 2;

    b->yy_ch_buf = (char *)

     yaoosl_realloc( (void *) b->yy_ch_buf,
        (yy_size_t) (b->yy_buf_size + 2) );
    }
   else

    b->yy_ch_buf = 
# 1733 "lex.yaoosl_.c" 3 4
                  ((void *)0)
# 1733 "lex.yaoosl_.c"
                      ;

   if ( ! b->yy_ch_buf )
    yy_fatal_error( "fatal error - scanner input buffer overflow" )
                                                   ;

   (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

   num_to_read = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size -
      number_to_move - 1;

   }

  if ( num_to_read > 8192 )
   num_to_read = 8192;


  if ( (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_is_interactive ) { int c = '*'; int n; for ( n = 0; n < num_to_read && (c = getc( yaoosl_in )) != 
# 1750 "lex.yaoosl_.c" 3
 (-1) 
# 1750 "lex.yaoosl_.c"
 && c != '\n'; ++n ) (&(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[number_to_move])[n] = (char) c; if ( c == '\n' ) (&(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[number_to_move])[n++] = (char) c; if ( c == 
# 1750 "lex.yaoosl_.c" 3
 (-1) 
# 1750 "lex.yaoosl_.c"
 && 
# 1750 "lex.yaoosl_.c" 3
 ((int)(((
# 1750 "lex.yaoosl_.c"
 yaoosl_in
# 1750 "lex.yaoosl_.c" 3
 )->_flags & 0x0040) != 0)) 
# 1750 "lex.yaoosl_.c"
 ) yy_fatal_error( "input in flex scanner failed" ); (yy_n_chars) = n; } else { 
# 1750 "lex.yaoosl_.c" 3
 (*__errno())
# 1750 "lex.yaoosl_.c"
 =0; while ( ((yy_n_chars) = (int) fread((&(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[number_to_move]), 1, (yy_size_t) num_to_read, yaoosl_in)) == 0 && 
# 1750 "lex.yaoosl_.c" 3
 ((int)(((
# 1750 "lex.yaoosl_.c"
 yaoosl_in
# 1750 "lex.yaoosl_.c" 3
 )->_flags & 0x0040) != 0))
# 1750 "lex.yaoosl_.c"
 ) { if( 
# 1750 "lex.yaoosl_.c" 3
 (*__errno()) 
# 1750 "lex.yaoosl_.c"
 != 
# 1750 "lex.yaoosl_.c" 3
 4
# 1750 "lex.yaoosl_.c"
 ) { yy_fatal_error( "input in flex scanner failed" ); break; } 
# 1750 "lex.yaoosl_.c" 3
 (*__errno())
# 1750 "lex.yaoosl_.c"
 =0; 
# 1750 "lex.yaoosl_.c" 3
 ((void)((
# 1750 "lex.yaoosl_.c"
 yaoosl_in
# 1750 "lex.yaoosl_.c" 3
 )->_flags &= ~(0x0040|0x0020)))
# 1750 "lex.yaoosl_.c"
 ; } }
                              ;

  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars = (yy_n_chars);
  }

 if ( (yy_n_chars) == 0 )
  {
  if ( number_to_move == 0 )
   {
   ret_val = 1;
   yaoosl_restart( yaoosl_in );
   }

  else
   {
   ret_val = 2;
   (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buffer_status =
    2;
   }
  }

 else
  ret_val = 0;

 if (((yy_n_chars) + number_to_move) > (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size) {

  int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf = (char *) yaoosl_realloc(
   (void *) (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf, (yy_size_t) new_size );
  if ( ! (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf )
   yy_fatal_error( "out of dynamic memory in yy_get_next_buffer()" );

  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size = (int) (new_size - 2);
 }

 (yy_n_chars) += number_to_move;
 (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars)] = 0;
 (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars) + 1] = 0;

 (yaoosl_text) = &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[0];

 return ret_val;
}



    static yy_state_type yy_get_previous_state (void)
{
 yy_state_type yy_current_state;
 char *yy_cp;

 yy_current_state = (yy_start);

 for ( yy_cp = (yaoosl_text) + 0; yy_cp < (yy_c_buf_p); ++yy_cp )
  {
  YY_CHAR yy_c = (*yy_cp ? yy_ec[((YY_CHAR) (*yy_cp))] : 1);
  if ( yy_accept[yy_current_state] )
   {
   (yy_last_accepting_state) = yy_current_state;
   (yy_last_accepting_cpos) = yy_cp;
   }
  while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
   {
   yy_current_state = (int) yy_def[yy_current_state];
   if ( yy_current_state >= 198 )
    yy_c = yy_meta[yy_c];
   }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  }

 return yy_current_state;
}






    static yy_state_type yy_try_NUL_trans (yy_state_type yy_current_state )
{
 int yy_is_jam;
     char *yy_cp = (yy_c_buf_p);

 YY_CHAR yy_c = 1;
 if ( yy_accept[yy_current_state] )
  {
  (yy_last_accepting_state) = yy_current_state;
  (yy_last_accepting_cpos) = yy_cp;
  }
 while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
  {
  yy_current_state = (int) yy_def[yy_current_state];
  if ( yy_current_state >= 198 )
   yy_c = yy_meta[yy_c];
  }
 yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 yy_is_jam = (yy_current_state == 197);

  return yy_is_jam ? 0 : yy_current_state;
}



    static void yyunput (int c, char * yy_bp )
{
 char *yy_cp;

    yy_cp = (yy_c_buf_p);


 *yy_cp = (yy_hold_char);

 if ( yy_cp < (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf + 2 )
  {

  int number_to_move = (yy_n_chars) + 2;
  char *dest = &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[
     (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size + 2];
  char *source =
    &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[number_to_move];

  while ( source > (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf )
   *--dest = *--source;

  yy_cp += (int) (dest - source);
  yy_bp += (int) (dest - source);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars =
   (yy_n_chars) = (int) (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_size;

  if ( yy_cp < (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf + 2 )
   yy_fatal_error( "flex scanner push-back overflow" );
  }

 *--yy_cp = (char) c;

 (yaoosl_text) = yy_bp;
 (yy_hold_char) = *yy_cp;
 (yy_c_buf_p) = yy_cp;
}







    static int input (void)


{
 int c;

 *(yy_c_buf_p) = (yy_hold_char);

 if ( *(yy_c_buf_p) == 0 )
  {




  if ( (yy_c_buf_p) < &(yy_buffer_stack)[(yy_buffer_stack_top)]->yy_ch_buf[(yy_n_chars)] )

   *(yy_c_buf_p) = '\0';

  else
   {
   int offset = (int) ((yy_c_buf_p) - (yaoosl_text));
   ++(yy_c_buf_p);

   switch ( yy_get_next_buffer( ) )
    {
    case 2:
# 1934 "lex.yaoosl_.c"
     yaoosl_restart( yaoosl_in );



    case 1:
     {
     if ( ( 1) )
      return 0;

     if ( ! (yy_did_buffer_switch_on_eof) )
      yaoosl_restart( yaoosl_in );



     return input();

     }

    case 0:
     (yy_c_buf_p) = (yaoosl_text) + offset;
     break;
    }
   }
  }

 c = *(unsigned char *) (yy_c_buf_p);
 *(yy_c_buf_p) = '\0';
 (yy_hold_char) = *++(yy_c_buf_p);

 return c;
}







    void yaoosl_restart (FILE * input_file )
{

 if ( ! ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 1975 "lex.yaoosl_.c" 3 4
       ((void *)0)
# 1975 "lex.yaoosl_.c"
       ) ){
        yaoosl_ensure_buffer_stack ();
  (yy_buffer_stack)[(yy_buffer_stack_top)] =
            yaoosl__create_buffer( yaoosl_in, 16384 );
 }

 yaoosl__init_buffer( ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 1981 "lex.yaoosl_.c" 3 4
                ((void *)0)
# 1981 "lex.yaoosl_.c"
                ), input_file );
 yaoosl__load_buffer_state( );
}





    void yaoosl__switch_to_buffer (YY_BUFFER_STATE new_buffer )
{






 yaoosl_ensure_buffer_stack ();
 if ( ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 1998 "lex.yaoosl_.c" 3 4
     ((void *)0)
# 1998 "lex.yaoosl_.c"
     ) == new_buffer )
  return;

 if ( ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2001 "lex.yaoosl_.c" 3 4
     ((void *)0)
# 2001 "lex.yaoosl_.c"
     ) )
  {

  *(yy_c_buf_p) = (yy_hold_char);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_pos = (yy_c_buf_p);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars = (yy_n_chars);
  }

 (yy_buffer_stack)[(yy_buffer_stack_top)] = new_buffer;
 yaoosl__load_buffer_state( );






 (yy_did_buffer_switch_on_eof) = 1;
}

static void yaoosl__load_buffer_state (void)
{
     (yy_n_chars) = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars;
 (yaoosl_text) = (yy_c_buf_p) = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_pos;
 yaoosl_in = (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_input_file;
 (yy_hold_char) = *(yy_c_buf_p);
}







    YY_BUFFER_STATE yaoosl__create_buffer (FILE * file, int size )
{
 YY_BUFFER_STATE b;

 b = (YY_BUFFER_STATE) yaoosl_alloc( sizeof( struct yy_buffer_state ) );
 if ( ! b )
  yy_fatal_error( "out of dynamic memory in yy_create_buffer()" );

 b->yy_buf_size = size;




 b->yy_ch_buf = (char *) yaoosl_alloc( (yy_size_t) (b->yy_buf_size + 2) );
 if ( ! b->yy_ch_buf )
  yy_fatal_error( "out of dynamic memory in yy_create_buffer()" );

 b->yy_is_our_buffer = 1;

 yaoosl__init_buffer( b, file );

 return b;
}





    void yaoosl__delete_buffer (YY_BUFFER_STATE b )
{

 if ( ! b )
  return;

 if ( b == ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2068 "lex.yaoosl_.c" 3 4
          ((void *)0)
# 2068 "lex.yaoosl_.c"
          ) )
  (yy_buffer_stack)[(yy_buffer_stack_top)] = (YY_BUFFER_STATE) 0;

 if ( b->yy_is_our_buffer )
  yaoosl_free( (void *) b->yy_ch_buf );

 yaoosl_free( (void *) b );
}





    static void yaoosl__init_buffer (YY_BUFFER_STATE b, FILE * file )

{
 int oerrno = 
# 2084 "lex.yaoosl_.c" 3
             (*__errno())
# 2084 "lex.yaoosl_.c"
                  ;

 yaoosl__flush_buffer( b );

 b->yy_input_file = file;
 b->yy_fill_buffer = 1;





    if (b != ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2095 "lex.yaoosl_.c" 3 4
            ((void *)0)
# 2095 "lex.yaoosl_.c"
            )){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;

 
# 2102 "lex.yaoosl_.c" 3
(*__errno()) 
# 2102 "lex.yaoosl_.c"
      = oerrno;
}





    void yaoosl__flush_buffer (YY_BUFFER_STATE b )
{
     if ( ! b )
  return;

 b->yy_n_chars = 0;





 b->yy_ch_buf[0] = 0;
 b->yy_ch_buf[1] = 0;

 b->yy_buf_pos = &b->yy_ch_buf[0];

 b->yy_at_bol = 1;
 b->yy_buffer_status = 0;

 if ( b == ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2128 "lex.yaoosl_.c" 3 4
          ((void *)0)
# 2128 "lex.yaoosl_.c"
          ) )
  yaoosl__load_buffer_state( );
}







void yaoosl_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
     if (new_buffer == 
# 2140 "lex.yaoosl_.c" 3 4
                      ((void *)0)
# 2140 "lex.yaoosl_.c"
                          )
  return;

 yaoosl_ensure_buffer_stack();


 if ( ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2146 "lex.yaoosl_.c" 3 4
     ((void *)0)
# 2146 "lex.yaoosl_.c"
     ) )
  {

  *(yy_c_buf_p) = (yy_hold_char);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_buf_pos = (yy_c_buf_p);
  (yy_buffer_stack)[(yy_buffer_stack_top)]->yy_n_chars = (yy_n_chars);
  }


 if (( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2155 "lex.yaoosl_.c" 3 4
    ((void *)0)
# 2155 "lex.yaoosl_.c"
    ))
  (yy_buffer_stack_top)++;
 (yy_buffer_stack)[(yy_buffer_stack_top)] = new_buffer;


 yaoosl__load_buffer_state( );
 (yy_did_buffer_switch_on_eof) = 1;
}





void yaoosl_pop_buffer_state (void)
{
     if (!( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2170 "lex.yaoosl_.c" 3 4
         ((void *)0)
# 2170 "lex.yaoosl_.c"
         ))
  return;

 yaoosl__delete_buffer(( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2173 "lex.yaoosl_.c" 3 4
                 ((void *)0)
# 2173 "lex.yaoosl_.c"
                 ) );
 (yy_buffer_stack)[(yy_buffer_stack_top)] = 
# 2174 "lex.yaoosl_.c" 3 4
                           ((void *)0)
# 2174 "lex.yaoosl_.c"
                               ;
 if ((yy_buffer_stack_top) > 0)
  --(yy_buffer_stack_top);

 if (( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2178 "lex.yaoosl_.c" 3 4
    ((void *)0)
# 2178 "lex.yaoosl_.c"
    )) {
  yaoosl__load_buffer_state( );
  (yy_did_buffer_switch_on_eof) = 1;
 }
}




static void yaoosl_ensure_buffer_stack (void)
{
 yy_size_t num_to_alloc;

 if (!(yy_buffer_stack)) {





      num_to_alloc = 1;
  (yy_buffer_stack) = (struct yy_buffer_state**)yaoosl_alloc
        (num_to_alloc * sizeof(struct yy_buffer_state*)
        );
  if ( ! (yy_buffer_stack) )
   yy_fatal_error( "out of dynamic memory in yyensure_buffer_stack()" );

  memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

  (yy_buffer_stack_max) = num_to_alloc;
  (yy_buffer_stack_top) = 0;
  return;
 }

 if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){


  yy_size_t grow_size = 8 ;

  num_to_alloc = (yy_buffer_stack_max) + grow_size;
  (yy_buffer_stack) = (struct yy_buffer_state**)yaoosl_realloc
        ((yy_buffer_stack),
        num_to_alloc * sizeof(struct yy_buffer_state*)
        );
  if ( ! (yy_buffer_stack) )
   yy_fatal_error( "out of dynamic memory in yyensure_buffer_stack()" );


  memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
  (yy_buffer_stack_max) = num_to_alloc;
 }
}







YY_BUFFER_STATE yaoosl__scan_buffer (char * base, yy_size_t size )
{
 YY_BUFFER_STATE b;

 if ( size < 2 ||
      base[size-2] != 0 ||
      base[size-1] != 0 )

  return 
# 2244 "lex.yaoosl_.c" 3 4
        ((void *)0)
# 2244 "lex.yaoosl_.c"
            ;

 b = (YY_BUFFER_STATE) yaoosl_alloc( sizeof( struct yy_buffer_state ) );
 if ( ! b )
  yy_fatal_error( "out of dynamic memory in yy_scan_buffer()" );

 b->yy_buf_size = (int) (size - 2);
 b->yy_buf_pos = b->yy_ch_buf = base;
 b->yy_is_our_buffer = 0;
 b->yy_input_file = 
# 2253 "lex.yaoosl_.c" 3 4
                   ((void *)0)
# 2253 "lex.yaoosl_.c"
                       ;
 b->yy_n_chars = b->yy_buf_size;
 b->yy_is_interactive = 0;
 b->yy_at_bol = 1;
 b->yy_fill_buffer = 0;
 b->yy_buffer_status = 0;

 yaoosl__switch_to_buffer( b );

 return b;
}
# 2273 "lex.yaoosl_.c"
YY_BUFFER_STATE yaoosl__scan_string (const char * yystr )
{

 return yaoosl__scan_bytes( yystr, (int) strlen(yystr) );
}
# 2286 "lex.yaoosl_.c"
YY_BUFFER_STATE yaoosl__scan_bytes (const char * yybytes, int _yybytes_len )
{
 YY_BUFFER_STATE b;
 char *buf;
 yy_size_t n;
 int i;


 n = (yy_size_t) (_yybytes_len + 2);
 buf = (char *) yaoosl_alloc( n );
 if ( ! buf )
  yy_fatal_error( "out of dynamic memory in yy_scan_bytes()" );

 for ( i = 0; i < _yybytes_len; ++i )
  buf[i] = yybytes[i];

 buf[_yybytes_len] = buf[_yybytes_len+1] = 0;

 b = yaoosl__scan_buffer( buf, n );
 if ( ! b )
  yy_fatal_error( "bad buffer in yy_scan_bytes()" );




 b->yy_is_our_buffer = 1;

 return b;
}





static void __attribute__((__noreturn__)) yy_fatal_error (const char* msg )
{
   fprintf( 
# 2322 "lex.yaoosl_.c" 3
           (_impure_ptr->_stderr)
# 2322 "lex.yaoosl_.c"
                 , "%s\n", msg );
 exit( 2 );
}
# 2348 "lex.yaoosl_.c"
int yaoosl_get_lineno (void)
{

    return yaoosl_lineno;
}




FILE *yaoosl_get_in (void)
{
        return yaoosl_in;
}




FILE *yaoosl_get_out (void)
{
        return yaoosl_out;
}




int yaoosl_get_leng (void)
{
        return yaoosl_leng;
}





char *yaoosl_get_text (void)
{
        return yaoosl_text;
}





void yaoosl_set_lineno (int _line_number )
{

    yaoosl_lineno = _line_number;
}







void yaoosl_set_in (FILE * _in_str )
{
        yaoosl_in = _in_str ;
}

void yaoosl_set_out (FILE * _out_str )
{
        yaoosl_out = _out_str ;
}

int yaoosl_get_debug (void)
{
        return yaoosl__flex_debug;
}

void yaoosl_set_debug (int _bdebug )
{
        yaoosl__flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{




    (yy_buffer_stack) = 
# 2429 "lex.yaoosl_.c" 3 4
                       ((void *)0)
# 2429 "lex.yaoosl_.c"
                           ;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = 
# 2432 "lex.yaoosl_.c" 3 4
                  ((void *)0)
# 2432 "lex.yaoosl_.c"
                      ;
    (yy_init) = 0;
    (yy_start) = 0;






    yaoosl_in = 
# 2441 "lex.yaoosl_.c" 3 4
          ((void *)0)
# 2441 "lex.yaoosl_.c"
              ;
    yaoosl_out = 
# 2442 "lex.yaoosl_.c" 3 4
           ((void *)0)
# 2442 "lex.yaoosl_.c"
               ;





    return 0;
}


int yaoosl_lex_destroy (void)
{


 while(( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2456 "lex.yaoosl_.c" 3 4
      ((void *)0)
# 2456 "lex.yaoosl_.c"
      )){
  yaoosl__delete_buffer( ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : 
# 2457 "lex.yaoosl_.c" 3 4
                   ((void *)0)
# 2457 "lex.yaoosl_.c"
                   ) );
  (yy_buffer_stack)[(yy_buffer_stack_top)] = 
# 2458 "lex.yaoosl_.c" 3 4
                            ((void *)0)
# 2458 "lex.yaoosl_.c"
                                ;
  yaoosl_pop_buffer_state();
 }


 yaoosl_free((yy_buffer_stack) );
 (yy_buffer_stack) = 
# 2464 "lex.yaoosl_.c" 3 4
                    ((void *)0)
# 2464 "lex.yaoosl_.c"
                        ;



    yy_init_globals( );

    return 0;
}
# 2498 "lex.yaoosl_.c"
void *yaoosl_alloc (yy_size_t size )
{
   return malloc(size);
}

void *yaoosl_realloc (void * ptr, yy_size_t size )
{
# 2513 "lex.yaoosl_.c"
 return realloc(ptr, size);
}

void yaoosl_free (void * ptr )
{
   free( (char *) ptr );
}
# 98 "yaoosl.l"
